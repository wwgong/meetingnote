#Meeting note for meeting on 10/10/2011.

= TPCC Schema + Transfer Example =

== After load TPCC warehouse data, run Transfer test.==
First, I modified the Transfer example to use TPCC schema. 

  * Configuration: Add all new Transfer files in the tpc-c scr folder and modify project file to compile them and add to jar file

  * Server end: BenchmarkController

  * Client end: Transfer client end

== Modify the Transfer example to use TPCC schema ==
Procedures:
  *	TransferBalance: transfer money between two customers, similar to PaymentByCustomerID
{{{
UPDATE CUSTOMER	 SET C_BALANCE = C_BALANCE - ?
WHERE C_ID = ? AND C_D_ID = ? AND C_W_ID = ?;

UPDATE CUSTOMER SET C_BALANCE = C_BALANCE + ?
WHERE C_ID = ? AND C_D_ID = ? AND C_W_ID = ?;
}}}

  *	RetrieveCustomerIds: find c_ids by given w_id and d_id
{{{
SELECT C_ID, C_BALANCE FROM CUSTOMER 
WHERE C_W_ID = ? AND C_D_ID = ?;
}}}

  *	RetrieveBalance: find c_balance by given w_id, d_id and c_id
{{{
SELECT C_ID, C_BALANCE FROM CUSTOMER
WHERE C_W_ID = ? AND C_D_ID = ? AND C_ID = ?;
}}}

  *	InsertWarehouse, InsertDistrict, InsertCustomer: insert necessary data to start test
{{{
WAREHOUSE: w_id, w_name
DISTRICT: d_id, d_w_id, d_name
CUSTOMER: c_id, c_w_id, c_d_id, c_first, c_last, c_balance, c_since
}}}



=Sequence SQL 2003 Standard=

== Sequence generator==
  * Type
     * External sequence generator -- named schema object
     *  Internal sequence generator -- a component of another schema object

  * Data type: numeric

  * Components: minimal, maximum, start value, increment, cycle option, current base value

== Supported operations ==
  * generate next value

  * create sequence generator

  * alter sequence generator



=Sequence in VoltDB=

  * Only consider internal sequence generator, and user can’t specify minimal, maximum, start value, increment, cycle option. Then the most important operation is generating next value.

  * Example: generate new order id based on warehouse id and district id.
{{{
(W_ID, D_ID, O_ID) partitioned by (W_ID, D_ID)
}}}

      # Only one column can be the partition column in one table, here is W_ID. So first, we simplify the problem as creating a partition sequence PS based on partition column (W_ID). 
           * Since all transactions for a particular W_ID will execute in a single partition, we will take advantage of existing TransactionIdManager to create PS if PS is not gap-free. But note: one partition can have multiple sites.
           * Usage: it is an internal sequence generator, similar to AUTO_INCREMENT in MySQL. If a column is specified as AUTO_INCREMENT while creating table, it will be automatically partitioned on the partition column, and a sequence will be created only SQL statement supported is INSERT.
{{{
INSERT INTO T (W_ID) VALUES (?)
Request: in – (table name, partition column id)
         out – (next sequence value)
}}}
           * To generate next value: (MinSiteId + CurrentSystemTime)
                   * Note: Replace MinSiteId + CurrentSystemTime by TxnId, because if we can't have complete partitioned sequence (partition_id + continuous number), any unique number can be used.
           * If system reboots from a existing snapshot, the site id assigned can be different from the data stored in the snapshot, we need to compare them first
                       * case1: if value (current min site id + current system time) is larger than the maximum value stored, no need to change anything.
                       * case2: otherwise, we need to produce a “fake” min site id instead of the real one, which is much larger than the original site id, for example we can double f_site_id until (f_site_id + system time) is larger than the maximum value stored.

  # If we want to create a partitioned sequence based on multiple columns, we call this situation Conditional Partitioned Sequence (CPS). For example, generate next order id based on (W_ID, D_ID)
           * If we apply above approach, we need to concatenate (MinSiteID + D_ID + CurrentSystemTime), however, the length of the data type we use will limit the maximum value we can generate.
           * If we use a “secret table” (W_ID, D_ID, SN) where SN holds current sequence value for (W_ID, D_ID), and this table is also partitioned on W_ID, we need to extend current SQL supported by VoltDB.
                       * Usage: while creating table, we need to specify the sequence.
                                   * Extend CREATE TABLE statement
{{{
column_name SEQUENCE ON(partition column, column_name1, …)
}}}
                                   *  	When INSERTing a record to the table, either explicitly assign NULL or 0 to the sequence column or leaving it empty, the value will be automatically filled by the sequence. 
                                               * To get next value, system reads the value stored in the table, increase it and use increased value in the INSERT statement.
                                               * Since all transactions will be committed in txid order, it’s safe to leave the sequence table for next waiting transaction after current one finishing its read-write.



=Get 2-partition query’s partition info=
  * Syntax to use partition info in 2-partition query
{{{
@ProcInfo(
	partitionInfo = "TABLE.COLUMN: ID1, ID2",
	singlePartition = BOOLEAN,
	twoPartition = BOOLEAN
)
}}}
    * singlePartition and twoPartition can't be both true
    * when  both singlePartition and twoPartition are false, no partitionInfo allowed

  * File modified:
{{{
src/catgen/spec.txt: add two attributes for Procedure
	bool	twopartition
	int	partitionparameter2
src/frontend/org/voltdb/ProcInfo
	boolean twoPartition()
src/frontend/org/voltdb/ProcInfoData
	public boolean twoPartition = false
src/frontend/org/voltdb/compiler/ProcedureCompiler
	compileJavaProcedure()
src/frontend/org/voltdb/ClientInterface
	handleRead()
}}}